// src/dashboardJS/tabs.js - Sistema de pesta√±as INTELIGENTE
// Compatible con dashboard.html y admin-dashboard.html

export const tabsManager = {
    currentTab: null,
    availableTabs: [],
    
    /**
     * Inicializa el sistema de pesta√±as
     */
    init() {
        console.log('üóÇÔ∏è Inicializando pesta√±as...');
        
        // ‚úÖ CORREGIDO: Detectar pesta√±as disponibles din√°micamente
        this.detectAvailableTabs();
        
        this.bindEvents();
        
        // ‚úÖ CORREGIDO: Mostrar primera pesta√±a disponible
        if (this.availableTabs.length > 0) {
            this.showTab(this.availableTabs[0]);
        }
        
        console.log('‚úÖ Pesta√±as inicializadas');
    },
    
    /**
     * ‚úÖ NUEVO: Detecta qu√© pesta√±as est√°n disponibles en la p√°gina actual
     */
    detectAvailableTabs() {
        const tabButtons = document.querySelectorAll('.tab-btn[data-tab]');
        this.availableTabs = [];
        
        tabButtons.forEach(button => {
            const tabId = button.getAttribute('data-tab');
            const tabContent = document.getElementById(`${tabId}-tab`);
            
            if (tabContent) {
                this.availableTabs.push(tabId);
            }
        });
        
        console.log('üìã Pesta√±as disponibles:', this.availableTabs);
    },
    
    /**
     * Vincula eventos de las pesta√±as
     */
    bindEvents() {
        const tabButtons = document.querySelectorAll('.tab-btn');
        
        tabButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const tabId = e.currentTarget.getAttribute('data-tab');
                this.showTab(tabId);
            });
        });
    },
    
    /**
     * Muestra una pesta√±a espec√≠fica
     * @param {string} tabId - ID de la pesta√±a
     */
    showTab(tabId) {
        console.log(`üóÇÔ∏è Cambiando a: ${tabId}`);
        
        // ‚úÖ CORREGIDO: Verificar que la pesta√±a existe antes de cambiar
        if (!this.availableTabs.includes(tabId)) {
            console.warn(`‚ö†Ô∏è Pesta√±a '${tabId}' no disponible. Pesta√±as v√°lidas:`, this.availableTabs);
            return false;
        }
        
        // Remover clases activas
        document.querySelectorAll('.tab-btn').forEach(btn => 
            btn.classList.remove('active')
        );
        document.querySelectorAll('.tab-content').forEach(content => 
            content.classList.remove('active')
        );
        
        // Activar pesta√±a y contenido
        const activeButton = document.querySelector(`[data-tab="${tabId}"]`);
        const activeContent = document.getElementById(`${tabId}-tab`);
        
        if (activeButton && activeContent) {
            activeButton.classList.add('active');
            activeContent.classList.add('active');
            
            // Actualizar estado y disparar evento
            const previousTab = this.currentTab;
            this.currentTab = tabId;
            
            this.dispatchTabChangeEvent(tabId, previousTab);
            
            console.log(`‚úÖ Pesta√±a '${tabId}' activada`);
            return true;
        } else {
            console.error(`‚ùå Elementos de pesta√±a '${tabId}' no encontrados`);
            return false;
        }
    },
    
    /**
     * Dispara evento personalizado de cambio de pesta√±a
     * @param {string} tabId - Pesta√±a actual
     * @param {string} previousTab - Pesta√±a anterior
     */
    dispatchTabChangeEvent(tabId, previousTab) {
        const event = new CustomEvent('tabChanged', {
            detail: { tabId, previousTab, availableTabs: this.availableTabs }
        });
        document.dispatchEvent(event);
    },
    
    /**
     * Obtiene la pesta√±a actualmente activa
     * @returns {string} - ID de la pesta√±a activa
     */
    getCurrentTab() {
        return this.currentTab;
    },
    
    /**
     * Verifica si una pesta√±a est√° activa
     * @param {string} tabId - ID de la pesta√±a
     * @returns {boolean} - True si est√° activa
     */
    isTabActive(tabId) {
        return this.currentTab === tabId;
    },
    
    /**
     * ‚úÖ NUEVO: Obtiene lista de pesta√±as disponibles
     * @returns {Array} - Array de IDs de pesta√±as disponibles
     */
    getAvailableTabs() {
        return [...this.availableTabs];
    },
    
    /**
     * ‚úÖ NUEVO: Verifica si una pesta√±a espec√≠fica existe
     * @param {string} tabId - ID de la pesta√±a
     * @returns {boolean} - True si existe
     */
    tabExists(tabId) {
        return this.availableTabs.includes(tabId);
    },
    
    /**
     * ‚úÖ NUEVO: Cambia a pesta√±a con fallback
     * @param {string} preferredTab - Pesta√±a preferida
     * @param {string} fallbackTab - Pesta√±a fallback
     */
    showTabWithFallback(preferredTab, fallbackTab = null) {
        if (this.tabExists(preferredTab)) {
            return this.showTab(preferredTab);
        } else if (fallbackTab && this.tabExists(fallbackTab)) {
            console.log(`‚ö†Ô∏è Pesta√±a '${preferredTab}' no existe, usando fallback '${fallbackTab}'`);
            return this.showTab(fallbackTab);
        } else if (this.availableTabs.length > 0) {
            console.log(`‚ö†Ô∏è Usando primera pesta√±a disponible: '${this.availableTabs[0]}'`);
            return this.showTab(this.availableTabs[0]);
        } else {
            console.error('‚ùå No hay pesta√±as disponibles');
            return false;
        }
    }
};